[!exec:git] skip 'git is required to run this script'

exec git init
exec git config user.name "Test Script"
exec git config user.email "test@script.tld"

exec git add initial.txt
exec git commit -m 'initial commit'

# A cherry-picked commit with a change-id.
exec git checkout -b cherry-pick
exec git add cherry-pick.txt

exec join-lines 'cherry-pick commit' '' 'Change-Id: I1111111111111111111111111111111111111111'
stdin stdout
exec git commit -F-

exec git checkout master
exec git cherry-pick cherry-pick

# The same, but with a merge commit
exec git checkout -b merge-commit
exec git add merge-commit.txt

exec join-lines 'merge-commit commit' '' 'Change-Id: I2222222222222222222222222222222222222222'
stdin stdout
exec git commit -F-

exec git checkout master
exec git merge --no-ff merge-commit

# A cherry-picked commit with different dates.
exec git checkout -b ancient-commit
exec git add ancient-commit.txt
env GIT_AUTHOR_DATE='2010-11-22 03:04:05'
env GIT_COMMITTER_DATE='2010-11-22 03:04:05'

exec join-lines 'ancient commit that was cherry-picked later' '' 'Change-Id: I3333333333333333333333333333333333333333'
stdin stdout
exec git commit -F-

env GIT_AUTHOR_DATE=
env GIT_COMMITTER_DATE=
exec git checkout master
exec git cherry-pick ancient-commit
exec git commit --amend --no-edit --date=now

# A cherry-picked commit with a changed title.
exec git checkout -b changed-title
exec git add changed-title.txt

exec join-lines 'old title' '' 'Change-Id: I4444444444444444444444444444444444444444'
stdin stdout
exec git commit -F-

exec git checkout master
exec git cherry-pick changed-title
exec join-lines 'new title' '' 'Change-Id: I4444444444444444444444444444444444444444'
stdin stdout
exec git commit --amend -F-

# A cherry-picked commit that got its Change-Id lost isn't picked.
exec git checkout -b lost-id
exec git add lost-id.txt

exec join-lines 'lost id commit' '' 'Change-Id: I5555555555555555555555555555555555555555'
stdin stdout
exec git commit -F-

exec git checkout master
exec git cherry-pick lost-id
exec git commit --amend -m 'lost id commit'

# A cherry-picked commit whose Change-Id was too short, so we skipped it. Given
# that we change the title, it's not picked.
exec git checkout -b bad-id
exec git add bad-id.txt

exec join-lines 'bad id commit' '' 'Change-Id: Iabc123'
stdin stdout
exec git commit -F-

exec git checkout master
exec git cherry-pick bad-id
exec join-lines 'changed bad id commit' '' 'Change-Id: Iabc123'
stdin stdout
exec git commit --amend -F-

# Check all the branches set up above.
exec git-picked
! stdout master
cmp stdout stdout.golden

-- stdout.golden --
ancient-commit
changed-title
cherry-pick
merge-commit
-- initial.txt --
initial content

-- cherry-pick.txt --
cherry-picked content

-- merge-commit.txt --
merge-committed content

-- ancient-commit.txt --
ancient-commit content

-- changed-title.txt --
changed-title content

-- lost-id.txt --
lost-id content

-- bad-id.txt --
bad-id content
